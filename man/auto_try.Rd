% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process.r
\name{auto_try}
\alias{auto_try}
\title{Auto Try-Catch}
\usage{
auto_try(expr, logfile)
}
\arguments{
\item{expr}{an \R expression to try.}

\item{logfile}{File to append messages to.}
}
\value{
\code{FALSE} if error encountered, \code{TRUE} otherwise.
}
\description{
Streamlined version of tryCatch
}
\details{
\code{try} evaluates an expression and traps any errors that occur
  during the evaluation.  If an error occurs then the error
  message is printed to the \code{\link[base]{stderr}} connection unless
  \code{options("show.error.messages")} is false or
  the call includes \code{silent = TRUE}.  The error message is also
  stored in a buffer where it can be retrieved by
  \code{geterrmessage}. (This should not be needed as the value returned
  in case of an error contains the error message.)

  \code{try} is implemented using \code{\link[base]{tryCatch}}; for
  programming, instead of \code{try(expr, silent = TRUE)}, something like
  \code{tryCatch(expr, error = function(e) e)} (or other simple
  error handler functions) may be more efficient and flexible.

  It may be useful to set the default for \code{outFile} to
  \code{\link[base]{stdout}()}, i.e., \preformatted{  options(try.outFile = stdout()) }
  instead of the default \code{\link[base]{stderr}()},
  notably when \code{try()} is used inside a \code{\link{Sweave}} code
  chunk and the error message should appear in the resulting document.
}
\examples{
## this example will not work correctly in example(try), but
## it does work correctly if pasted in
options(show.error.messages = FALSE)
try(log("a"))
print(.Last.value)
options(show.error.messages = TRUE)

## alternatively,
print(try(log("a"), TRUE))

## run a simulation, keep only the results that worked.
set.seed(123)
x <- stats::rnorm(50)
doit <- function(x)
{
    x <- sample(x, replace = TRUE)
    if(length(unique(x)) > 30) mean(x)
    else stop("too few unique points")
}
## alternative 1
res <- lapply(1:100, function(i) try(doit(x), TRUE))
## alternative 2
\dontrun{res <- vector("list", 100)
for(i in 1:100) res[[i]] <- try(doit(x), TRUE)}
unlist(res[sapply(res, function(x) !inherits(x, "try-error"))])
}
\seealso{
\code{\link[base]{options}} for setting error handlers and suppressing the
  printing of error messages;
  \code{\link[base]{geterrmessage}} for retrieving the last error message.
  The underlying \code{\link[base]{tryCatch}} provides more flexible means of
  catching and handling errors.

  \code{\link{assertCondition}} in package \pkg{tools} is related and
  useful for testing.
}
\keyword{internal}
